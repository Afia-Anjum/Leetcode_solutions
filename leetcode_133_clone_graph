"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        visited_node_list=[]

        def visit_node(node):
            n=Node()
            n.val=node.val
            n.neighbors=[]
            for neighbor in node.neighbors:
                n.neighbors.append(neighbor)
                nonlocal visited_node_list
                if not neighbor.val in visited_node_list:
                    visited_node_list.append(neighbor.val)
                    clone_node=visit_node(neighbor)
            return n
        visited_node_list.append(node.val)
        return visit_node(node)                                                       
